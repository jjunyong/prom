# Istio + Kubernetes 환경 Prometheus/Grafana 모니터링 완전 설치 가이드

## 📋 목차

1. [사전 준비사항](#1-사전-준비사항)
2. [디렉토리 구조 생성](#2-디렉토리-구조-생성)
3. [네임스페이스 생성](#3-네임스페이스-생성)
4. [Prometheus + Grafana 설치](#4-prometheus--grafana-설치)
5. [Spring Boot 애플리케이션 설정](#5-spring-boot-애플리케이션-설정)
6. [ServiceMonitor 설정](#6-servicemonitor-설정)
7. [CronJob 모니터링 설정](#7-cronjob-모니터링-설정)
8. [Grafana 대시보드 설정](#8-grafana-대시보드-설정)
9. [Alert Rules 설정](#9-alert-rules-설정)
10. [설치 검증](#10-설치-검증)
11. [트러블슈팅](#11-트러블슈팅)

---

## 1. 사전 준비사항

### 필수 도구 확인

```bash
# Kubernetes 클러스터 연결 확인
kubectl cluster-info
kubectl get nodes

# Helm 3 설치 확인 (없으면 설치)
helm version

# Helm 3 설치 (필요시)
curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

# Istio 설치 확인
kubectl get pods -n istio-system
```

---

## 2. 디렉토리 구조 생성

```bash
# 프로젝트 디렉토리 생성
mkdir -p kia-monitoring/{config,dashboards,alerts,scripts}
cd kia-monitoring

# 디렉토리 구조
# kia-monitoring/
# ├── config/
# │   ├── 01-namespace.yaml
# │   ├── 02-prometheus-values.yaml
# │   ├── 03-servicemonitor.yaml
# │   ├── 04-pushgateway.yaml
# │   └── 05-spring-deployment.yaml
# ├── dashboards/
# │   ├── kia-main-dashboard.json
# │   └── configmap-dashboard.yaml
# ├── alerts/
# │   └── alert-rules.yaml
# └── scripts/
#     ├── verify-monitoring.sh
#     └── push-metrics.sh
```

---

## 3. 네임스페이스 생성

### Step 3.1: 네임스페이스 YAML 생성

```bash
cat > config/01-namespace.yaml <<'EOF'
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    istio-injection: enabled
EOF
```

### Step 3.2: 네임스페이스 적용

```bash
kubectl apply -f config/01-namespace.yaml

# 확인
kubectl get namespace monitoring
```

---

## 4. Prometheus + Grafana 설치

### Step 4.1: Helm Repository 추가

```bash
# Prometheus Community Helm Chart 추가
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo add stable https://charts.helm.sh/stable
helm repo update
```

### Step 4.2: Prometheus + Grafana 설정 파일 생성

```bash
cat > config/02-prometheus-values.yaml <<'EOF'
# Prometheus Operator + Grafana 설정
fullnameOverride: prometheus-stack

# Prometheus 설정
prometheus:
  prometheusSpec:
    # 데이터 보존 기간
    retention: 30d
    retentionSize: "50GB"

    # 스토리지 설정
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: "standard"  # 클러스터에 맞게 수정
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 100Gi

    # 리소스 설정
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi

    # 스크레이프 간격
    scrapeInterval: 30s
    evaluationInterval: 30s

    # ServiceMonitor 셀렉터 - 모든 ServiceMonitor 수집
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}

    # PodMonitor 셀렉터 - 모든 PodMonitor 수집
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}

    # PrometheusRule 셀렉터 - 모든 PrometheusRule 수집
    ruleSelectorNilUsesHelmValues: false
    ruleSelector: {}

    # 추가 스크레이프 설정 - ServiceMonitor로 대체 가능한 것은 모두 제거
    additionalScrapeConfigs:
    # PushGateway만 여기서 정의 (ServiceMonitor로 관리하기 애매한 경우)
    - job_name: 'pushgateway'
      honor_labels: true
      static_configs:
      - targets: ['prometheus-pushgateway.monitoring:9091']

# Grafana 설정
grafana:
  enabled: true

  # 관리자 계정
  adminUser: admin
  adminPassword: "KiaMonitoring2024!"

  # 리소스 설정
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

  # 영구 스토리지
  persistence:
    enabled: true
    storageClassName: "standard"  # 클러스터에 맞게 수정
    size: 10Gi

  # 서비스 설정
  service:
    type: LoadBalancer  # 또는 NodePort
    port: 80

  # 데이터소스 자동 설정
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-stack-prometheus:9090
        access: proxy
        isDefault: true
        jsonData:
          timeInterval: "30s"

  # 대시보드 자동 프로비저닝
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: 'KIA'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards/default

  # 기본 대시보드 활성화
  defaultDashboardsEnabled: true

  # 추가 플러그인 설치
  plugins:
    - grafana-piechart-panel
    - grafana-clock-panel
    - grafana-worldmap-panel

  # Sidecar 설정 (ConfigMap에서 대시보드 자동 로드)
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      folder: /tmp/dashboards
      provider:
        allowUiUpdates: true
    datasources:
      enabled: true
      defaultDatasourceEnabled: true

# AlertManager 설정
alertmanager:
  enabled: true
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: "standard"
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h
      receiver: 'null'
      routes:
      - match:
          severity: critical
        receiver: slack-critical
    receivers:
    - name: 'null'
    - name: 'slack-critical'
      slack_configs:
      - api_url: 'YOUR_SLACK_WEBHOOK_URL'  # Slack Webhook URL 입력
        channel: '#alerts'
        title: 'KIA.com Critical Alert'

# 기타 컴포넌트 설정
kubeApiServer:
  enabled: true
kubeControllerManager:
  enabled: false
kubeScheduler:
  enabled: false
kubeEtcd:
  enabled: false
kubeProxy:
  enabled: true
kubeStateMetrics:
  enabled: true
nodeExporter:
  enabled: true

# PushGateway 설치 (Helm 차트에 포함)
prometheus-pushgateway:
  enabled: false  # 별도로 설치할 예정
EOF
```

### Step 4.3: Helm으로 설치

```bash
# 설치 실행
helm install prometheus-stack \
  prometheus-community/kube-prometheus-stack \
  --namespace monitoring \
  --create-namespace \
  -f config/02-prometheus-values.yaml

# 설치 상태 확인
helm list -n monitoring

# Pod 상태 확인 (모든 pod이 Running 상태가 될 때까지 대기)
kubectl get pods -n monitoring -w

# Prometheus의 ServiceMonitor selector 설정 확인 (중요!)
kubectl get prometheus -n monitoring prometheus-stack-kube-prom-prometheus -o yaml | grep -A10 serviceMonitorSelector
```

---

## 5. Spring Boot 애플리케이션 설정

### Step 5.1: Spring Boot application.yaml 설정

```yaml
# src/main/resources/application.yaml
spring:
  application:
    name: kia-api-service

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
      base-path: /actuator
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: production
      service: kia-web
  endpoint:
    prometheus:
      enabled: true
    health:
      show-details: always
      probes:
        enabled: true

# 서버 포트 설정
server:
  port: 8080

# Actuator 포트 분리 (선택사항)
management:
  server:
    port: 8081
```

### Step 5.2: Spring Boot Deployment YAML 생성

```bash
cat > config/05-spring-deployment.yaml <<'EOF'
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-dpl
  namespace: default
  labels:
    app: api-dpl
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-dpl
  template:
    metadata:
      labels:
        app: api-dpl
        version: v1
    spec:
      containers:
      - name: api-service
        image: kia/api-service:latest  # 실제 이미지로 변경
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: metrics
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production"
        - name: JAVA_OPTS
          value: "-Xmx1024m -Xms512m -XX:+UseG1GC"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: api-dpl-service
  namespace: default
  labels:
    app: api-dpl
    monitoring: "true"  # ServiceMonitor가 찾을 수 있도록 라벨 추가
spec:
  type: ClusterIP
  ports:
  - port: 8080
    name: http
    targetPort: 8080
    protocol: TCP
  - port: 8081
    name: metrics  # ServiceMonitor에서 참조할 포트 이름
    targetPort: 8081
    protocol: TCP
  selector:
    app: api-dpl
EOF

# 적용
kubectl apply -f config/05-spring-deployment.yaml
```

---

## 6. ServiceMonitor 설정

### Step 6.1: ServiceMonitor YAML 생성 (통합 및 개선)

```bash
cat > config/03-servicemonitor.yaml <<'EOF'
# Spring Boot 애플리케이션 모니터링
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: spring-boot-api
  namespace: monitoring
  labels:
    app: spring-boot
    monitoring: "true"
spec:
  namespaceSelector:
    matchNames:
    - default
  selector:
    matchLabels:
      app: api-dpl
      monitoring: "true"
  endpoints:
  - port: metrics
    interval: 30s
    path: /actuator/prometheus
    scheme: http
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_name]
      targetLabel: pod
    - sourceLabels: [__meta_kubernetes_namespace]
      targetLabel: namespace
    - sourceLabels: [__meta_kubernetes_service_name]
      targetLabel: service
---
# Istio Control Plane 메트릭 모니터링
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-control-plane
  namespace: monitoring
  labels:
    monitoring: "true"
spec:
  namespaceSelector:
    matchNames:
    - istio-system
  selector:
    matchLabels:
      app: istiod
  endpoints:
  - port: http-monitoring
    interval: 30s
    path: /metrics
---
# Istio Data Plane (Envoy Proxies) 메트릭 모니터링
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-proxy-metrics
  namespace: monitoring
  labels:
    monitoring: "true"
spec:
  namespaceSelector:
    any: true
  selector:
    matchExpressions:
    - key: service.istio.io/canonical-name
      operator: Exists
  endpoints:
  - port: http-envoy-prom
    interval: 30s
    path: /stats/prometheus
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_label_app]
      targetLabel: app
    - sourceLabels: [__meta_kubernetes_pod_container_port_name]
      action: keep
      regex: '.*-envoy-prom'
---
# Istio Ingress Gateway 모니터링
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: istio-ingressgateway
  namespace: monitoring
  labels:
    monitoring: "true"
spec:
  namespaceSelector:
    matchNames:
    - istio-system
  selector:
    matchLabels:
      app: istio-ingressgateway
  endpoints:
  - port: http-envoy-prom
    interval: 30s
    path: /stats/prometheus
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_name]
      targetLabel: pod
    - sourceLabels: [__meta_kubernetes_namespace]
      targetLabel: namespace
---
# PushGateway 모니터링 (ServiceMonitor로 관리)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: pushgateway
  namespace: monitoring
  labels:
    monitoring: "true"
spec:
  selector:
    matchLabels:
      app: prometheus-pushgateway
  endpoints:
  - port: metrics
    interval: 30s
    honorLabels: true  # PushGateway의 라벨을 유지
EOF

# 적용
kubectl apply -f config/03-servicemonitor.yaml

# ServiceMonitor가 Prometheus에 의해 발견되는지 확인
kubectl get servicemonitor -n monitoring
```

### Step 6.2: ServiceMonitor 검증 스크립트

```bash
cat > scripts/verify-servicemonitor.sh <<'EOF'
#!/bin/bash

echo "======================================"
echo "ServiceMonitor 검증"
echo "======================================"

# Prometheus가 ServiceMonitor를 발견했는지 확인
echo "1. Prometheus Targets 확인:"
kubectl port-forward -n monitoring svc/prometheus-stack-kube-prom-prometheus 9090:9090 &
PF_PID=$!
sleep 3

# Targets API 호출
curl -s http://localhost:9090/api/v1/targets | jq '.data.activeTargets[] | {job: .labels.job, instance: .labels.instance, health: .health}'

kill $PF_PID 2>/dev/null

echo ""
echo "2. ServiceMonitor 상태:"
kubectl get servicemonitor -n monitoring -o wide

echo ""
echo "3. 매칭되지 않은 ServiceMonitor 찾기:"
kubectl get servicemonitor --all-namespaces -o json | jq -r '.items[] | select(.status.conditions==null) | .metadata.namespace + "/" + .metadata.name'
EOF

chmod +x scripts/verify-servicemonitor.sh
```

---

## 7. CronJob 모니터링 설정

### Step 7.1: PushGateway 설치 (개선된 버전)

```bash
cat > config/04-pushgateway.yaml <<'EOF'
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-pushgateway
  namespace: monitoring
  labels:
    app: prometheus-pushgateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-pushgateway
  template:
    metadata:
      labels:
        app: prometheus-pushgateway
    spec:
      containers:
      - name: pushgateway
        image: prom/pushgateway:v1.6.2
        args:
          - '--persistence.file=/data/metrics.txt'
          - '--persistence.interval=5m'
        ports:
        - containerPort: 9091
          name: metrics
        volumeMounts:
        - name: data
          mountPath: /data
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9091
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9091
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-pushgateway
  namespace: monitoring
  labels:
    app: prometheus-pushgateway
spec:
  type: ClusterIP
  ports:
  - port: 9091
    targetPort: 9091
    name: metrics
  selector:
    app: prometheus-pushgateway
EOF

kubectl apply -f config/04-pushgateway.yaml
```

### Step 7.2: 개선된 메트릭 전송 스크립트

```bash
cat > scripts/push-metrics.sh <<'EOF'
#!/bin/bash

# 메트릭 전송 함수
push_metrics() {
    local JOB_NAME=$1
    local STATUS=$2
    local START_TIME=$3
    local END_TIME=$4
    local NAMESPACE=${5:-default}
    local SCHEDULE=${6:-unknown}

    local DURATION=$((END_TIME - START_TIME))

    # 메트릭 전송 (실패해도 스크립트는 계속 진행)
    cat <<METRICS | curl --data-binary @- \
        http://prometheus-pushgateway.monitoring:9091/metrics/job/cronjob/instance/${JOB_NAME}/namespace/${NAMESPACE} \
        2>/dev/null || true
# HELP batch_job_duration_seconds Time spent processing batch job
# TYPE batch_job_duration_seconds gauge
batch_job_duration_seconds{job_name="${JOB_NAME}",namespace="${NAMESPACE}",schedule="${SCHEDULE}"} ${DURATION}

# HELP batch_job_last_completion_timestamp Last time batch job completed
# TYPE batch_job_last_completion_timestamp gauge
batch_job_last_completion_timestamp{job_name="${JOB_NAME}",namespace="${NAMESPACE}",schedule="${SCHEDULE}"} ${END_TIME}

# HELP batch_job_exit_code Exit code of batch job
# TYPE batch_job_exit_code gauge
batch_job_exit_code{job_name="${JOB_NAME}",namespace="${NAMESPACE}",schedule="${SCHEDULE}"} ${STATUS}

# HELP batch_job_success Whether the batch job succeeded
# TYPE batch_job_success gauge
batch_job_success{job_name="${JOB_NAME}",namespace="${NAMESPACE}",schedule="${SCHEDULE}"} $([ ${STATUS} -eq 0 ] && echo 1 || echo 0)
METRICS

    echo "[$(date)] Metrics pushed for ${JOB_NAME}: status=${STATUS}, duration=${DURATION}s"
}

# Export the function for use in other scripts
export -f push_metrics
EOF

chmod +x scripts/push-metrics.sh
```

### Step 7.3: CronJob 예제 (개선된 버전)

```bash
cat > config/cronjob-example.yaml <<'EOF'
apiVersion: v1
kind: ConfigMap
metadata:
  name: cronjob-scripts
  namespace: default
data:
  entrypoint.sh: |
    #!/bin/bash
    set -e

    # 환경 변수
    JOB_NAME="${JOB_NAME:-cronjob}"
    NAMESPACE="${NAMESPACE:-default}"
    SCHEDULE="${SCHEDULE:-unknown}"
    START_TIME=$(date +%s)

    # 종료 시 메트릭 전송 (성공/실패 모두)
    send_final_metrics() {
        local EXIT_CODE=$?
        local END_TIME=$(date +%s)
        local DURATION=$((END_TIME - START_TIME))

        echo "Sending metrics with exit code: ${EXIT_CODE}"

        cat <<EOF | curl --data-binary @- \
            http://prometheus-pushgateway.monitoring:9091/metrics/job/cronjob/instance/${JOB_NAME}/namespace/${NAMESPACE} \
            2>/dev/null || echo "Failed to send metrics"
    batch_job_duration_seconds{job_name="${JOB_NAME}",namespace="${NAMESPACE}",schedule="${SCHEDULE}"} ${DURATION}
    batch_job_last_completion_timestamp{job_name="${JOB_NAME}",namespace="${NAMESPACE}",schedule="${SCHEDULE}"} ${END_TIME}
    batch_job_exit_code{job_name="${JOB_NAME}",namespace="${NAMESPACE}",schedule="${SCHEDULE}"} ${EXIT_CODE}
    batch_job_success{job_name="${JOB_NAME}",namespace="${NAMESPACE}",schedule="${SCHEDULE}"} $([ ${EXIT_CODE} -eq 0 ] && echo 1 || echo 0)
    EOF
    }

    # trap을 사용하여 스크립트 종료 시 메트릭 전송
    trap send_final_metrics EXIT

    # 실제 작업 실행
    echo "Starting job: ${JOB_NAME}"
    exec "$@"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: daily-report
  namespace: default
  labels:
    cronjob: daily-report
spec:
  schedule: "0 2 * * *"  # 매일 새벽 2시
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            cronjob: daily-report
        spec:
          containers:
          - name: batch-job
            image: kia/batch-job:latest
            command: ["/scripts/entrypoint.sh"]
            args: ["java", "-jar", "/app/batch.jar", "--job.name=dailyReport"]
            env:
            - name: JOB_NAME
              value: "daily-report"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: SCHEDULE
              value: "0 2 * * *"
            volumeMounts:
            - name: scripts
              mountPath: /scripts
            resources:
              requests:
                cpu: 500m
                memory: 1Gi
              limits:
                cpu: 1000m
                memory: 2Gi
          restartPolicy: OnFailure
          volumes:
          - name: scripts
            configMap:
              name: cronjob-scripts
              defaultMode: 0755
EOF

kubectl apply -f config/cronjob-example.yaml
```

---

## 8. Grafana 대시보드 설정

### Step 8.1: 커스텀 대시보드 JSON 파일 생성

```bash
cat > dashboards/kia-main-dashboard.json <<'EOF'
{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 1,
  "id": null,
  "links": [],
  "panels": [
    {
      "datasource": "Prometheus",
      "description": "현재 서비스 가용성",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {"color": "red", "value": null},
              {"color": "yellow", "value": 95},
              {"color": "green", "value": 99}
            ]
          },
          "unit": "percent"
        }
      },
      "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0},
      "id": 1,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "9.5.3",
      "targets": [
        {
          "expr": "avg(up{job=\"spring-boot-api\"}) * 100",
          "legendFormat": "Availability",
          "refId": "A"
        }
      ],
      "title": "서비스 가용성 (SLA)",
      "type": "gauge"
    },
    {
      "datasource": "Prometheus",
      "description": "초당 요청 처리량",
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "palette-classic"},
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {"type": "linear"},
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {"group": "A", "mode": "none"},
            "thresholdsStyle": {"mode": "off"}
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [{"color": "green", "value": null}]
          },
          "unit": "reqps"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 6, "y": 0},
      "id": 2,
      "options": {
        "legend": {
          "calcs": ["mean", "max"],
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {"mode": "single"}
      },
      "targets": [
        {
          "expr": "sum(rate(istio_request_total{destination_service_namespace=\"default\",destination_service_name=\"api-dpl-service\"}[5m]))",
          "legendFormat": "Request Rate",
          "refId": "A"
        }
      ],
      "title": "요청 처리율 (RPS)",
      "type": "timeseries"
    },
    {
      "datasource": "Prometheus",
      "description": "P95 응답시간",
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "thresholds"},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {"color": "green", "value": null},
              {"color": "yellow", "value": 500},
              {"color": "red", "value": 1000}
            ]
          },
          "unit": "ms"
        }
      },
      "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0},
      "id": 3,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "targets": [
        {
          "expr": "histogram_quantile(0.95, sum(rate(istio_request_duration_milliseconds_bucket{destination_service_namespace=\"default\"}[5m])) by (le))",
          "legendFormat": "P95",
          "refId": "A"
        }
      ],
      "title": "P95 응답시간",
      "type": "stat"
    },
    {
      "datasource": "Prometheus",
      "description": "배치 작업 상태",
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "thresholds"},
          "mappings": [
            {"type": "value", "value": "0", "text": "Success"},
            {"type": "value", "value": "1", "text": "Failed"}
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {"color": "green", "value": null},
              {"color": "red", "value": 1}
            ]
          }
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8},
      "id": 4,
      "options": {
        "colorMode": "background",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "horizontal",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "textMode": "name"
      },
      "targets": [
        {
          "expr": "batch_job_success",
          "legendFormat": "{{job_name}}",
          "refId": "A"
        }
      ],
      "title": "배치 작업 상태",
      "type": "stat"
    },
    {
      "datasource": "Prometheus",
      "description": "배치 작업 마지막 실행 시간",
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "thresholds"},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {"color": "red", "value": null},
              {"color": "yellow", "value": 3600},
              {"color": "green", "value": 7200}
            ]
          },
          "unit": "s"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8},
      "id": 5,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "targets": [
        {
          "expr": "time() - batch_job_last_completion_timestamp",
          "legendFormat": "{{job_name}}",
          "refId": "A"
        }
      ],
      "title": "배치 작업 경과 시간",
      "type": "stat"
    }
```

# Kubernetes 1.20.8 모니터링 가이드 - Part 2

## 8. Grafana 대시보드 설정 (계속)

### Step 8.1: 커스텀 대시보드 JSON 파일 생성
```bash
cat > dashboards/kia-main-dashboard.json <<'EOF'
{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 1,
  "id": null,
  "links": [],
  "panels": [
    {
      "datasource": "Prometheus",
      "description": "현재 서비스 가용성",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {"color": "red", "value": null},
              {"color": "yellow", "value": 95},
              {"color": "green", "value": 99}
            ]
          },
          "unit": "percent"
        }
      },
      "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0},
      "id": 1,
      "options": {
        "orientation": "auto",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true
      },
      "pluginVersion": "8.5.27",
      "targets": [
        {
          "expr": "avg(up{job=\"spring-boot-pods\",app=\"api-dpl\"}) * 100",
          "legendFormat": "Availability",
          "refId": "A"
        }
      ],
      "title": "서비스 가용성 (SLA)",
      "type": "gauge"
    },
    {
      "datasource": "Prometheus",
      "description": "초당 요청 처리량",
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "palette-classic"},
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {"type": "linear"},
            "showPoints": "never",
            "spanNulls": true,
            "stacking": {"group": "A", "mode": "none"},
            "thresholdsStyle": {"mode": "off"}
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [{"color": "green", "value": null}]
          },
          "unit": "reqps"
        }
      },
      "gridPos": {"h": 8, "w": 12, "x": 6, "y": 0},
      "id": 2,
      "options": {
        "legend": {
          "calcs": ["mean", "max"],
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {"mode": "single"}
      },
      "targets": [
        {
          "expr": "sum(rate(istio_request_total{destination_service_namespace=\"default\",destination_service_name=\"api-dpl-service\"}[5m]))",
          "legendFormat": "Request Rate",
          "refId": "A"
        }
      ],
      "title": "요청 처리율 (RPS)",
      "type": "timeseries"
    },
    {
      "datasource": "Prometheus",
      "description": "P95 응답시간",
      "fieldConfig": {
        "defaults": {
          "color": {"mode": "thresholds"},
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {"color": "green", "value": null},
              {"color": "yellow", "value": 500},
              {"color": "red", "value": 1000}
            ]
          },
          "unit": "ms"
        }
      },
      "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0},
      "id": 3,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": ["lastNotNull"],
          "fields": "",
          "values": false
        },
        "textMode": "auto"
      },
      "targets": [
        {
          "expr": "histogram_quantile(0.95, sum(rate(istio_request_duration_milliseconds_bucket{destination_service_namespace=\"default\"}[5m])) by (le))",
          "legendFormat": "P95",
          "refId": "A"
        }
      ],
      "title": "P95 응답시간",
      "type": "stat"
    }
  ],
  "refresh": "30s",
  "schemaVersion": 30,
  "style": "dark",
  "tags": ["kia", "production"],
  "templating": {"list": []},
  "time": {"from": "now-1h", "to": "now"},
  "timepicker": {},
  "timezone": "Asia/Seoul",
  "title": "KIA.com 메인 대시보드",
  "uid": "kia-main",
  "version": 1,
  "weekStart": ""
}
EOF
```

### Step 8.2: ConfigMap으로 대시보드 배포
```bash
cat > dashboards/configmap-dashboard.yaml <<'EOF'
apiVersion: v1
kind: ConfigMap
metadata:
  name: kia-dashboard
  namespace: monitoring
  labels:
    grafana_dashboard: "1"
data:
  kia-dashboard.json: |
    {
      "dashboard": {
        "title": "KIA Web Service Dashboard",
        "panels": [],
        "refresh": "30s",
        "time": {"from": "now-1h", "to": "now"}
      }
    }
EOF

kubectl apply -f dashboards/configmap-dashboard.yaml
```

### Step 8.3: Grafana 접속 및 대시보드 Import

```bash
# Grafana 접속 정보 확인
echo "===== Grafana 접속 정보 ====="
echo "URL: http://localhost:3000"
echo "Username: admin"
echo "Password: KiaMonitoring2024!"

# Port-forward 설정
kubectl port-forward -n monitoring svc/prometheus-stack-grafana 3000:80
```

**브라우저에서 대시보드 Import:**
1. http://localhost:3000 접속
2. 로그인 (admin / KiaMonitoring2024!)
3. 좌측 메뉴 → Dashboards → Import
4. 다음 Dashboard ID 입력:
   - `7636` : Istio Service Mesh Dashboard
   - `12900` : Spring Boot 2.1 Statistics
   - `4701` : JVM (Micrometer)
   - `8588` : Kubernetes Cluster Monitoring (K8s 1.20 호환)
5. 또는 위에서 생성한 `kia-main-dashboard.json` 파일 업로드

---

## 9. Alert Rules 설정

### Step 9.1: Alert Rules YAML 생성
```bash
cat > alerts/alert-rules.yaml <<'EOF'
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: kia-web-alerts
  namespace: monitoring
  labels:
    prometheus: kube-prometheus
    role: alert-rules
    release: prometheus-stack  # Helm release 이름과 일치
spec:
  groups:
  - name: kia.web.sla
    interval: 30s
    rules:
    # 높은 에러율 알림
    - alert: HighErrorRate
      expr: |
        (sum(rate(istio_request_total{destination_service_namespace="default",response_code=~"5.."}[5m])) 
        / sum(rate(istio_request_total{destination_service_namespace="default"}[5m]))) > 0.01
      for: 5m
      labels:
        severity: critical
        service: kia-web
        team: platform
      annotations:
        summary: "높은 에러율 감지 ({{ $value | humanizePercentage }})"
        description: "지난 5분간 에러율이 1%를 초과했습니다. 현재: {{ $value | humanizePercentage }}"
    
    # 높은 응답시간 알림
    - alert: HighLatency
      expr: |
        histogram_quantile(0.95,
          sum(rate(istio_request_duration_milliseconds_bucket{destination_service_namespace="default"}[5m])) 
          by (le)
        ) > 1000
      for: 5m
      labels:
        severity: warning
        service: kia-web
        team: platform
      annotations:
        summary: "높은 응답시간 감지"
        description: "P95 응답시간이 1초를 초과했습니다. 현재: {{ $value }}ms"
    
    # 서비스 다운 알림
    - alert: ServiceDown
      expr: up{job="spring-boot-pods",app="api-dpl"} == 0
      for: 2m
      labels:
        severity: critical
        service: kia-api
        team: platform
      annotations:
        summary: "서비스 다운"
        description: "{{ $labels.pod }} 파드가 2분 이상 다운 상태입니다."
    
    # 메모리 사용량 알림
    - alert: HighMemoryUsage
      expr: |
        (sum(jvm_memory_used_bytes{application="kia-api-service",area="heap"}) 
        / sum(jvm_memory_max_bytes{application="kia-api-service",area="heap"})) > 0.85
      for: 5m
      labels:
        severity: warning
        service: kia-api
        team: platform
      annotations:
        summary: "높은 메모리 사용량"
        description: "JVM 힙 메모리 사용량이 85%를 초과했습니다. 현재: {{ $value | humanizePercentage }}"
    
    # 배치 작업 실패 알림
    - alert: BatchJobFailed
      expr: batch_job_status != 0
      for: 1m
      labels:
        severity: warning
        service: batch
        team: data
      annotations:
        summary: "배치 작업 실패"
        description: "{{ $labels.job_name }} 배치 작업이 실패했습니다. 상태 코드: {{ $value }}"
    
    # 배치 작업 지연 알림
    - alert: BatchJobDelayed
      expr: |
        (time() - batch_job_last_success_timestamp) > 7200
      for: 5m
      labels:
        severity: warning
        service: batch
        team: data
      annotations:
        summary: "배치 작업 지연"
        description: "{{ $labels.job_name }} 작업이 2시간 이상 실행되지 않았습니다."
    
    # DB 연결 풀 고갈 알림
    - alert: DatabaseConnectionPoolExhausted
      expr: |
        (hikaricp_connections_active{application="kia-api-service"} 
        / hikaricp_connections_max{application="kia-api-service"}) > 0.9
      for: 3m
      labels:
        severity: critical
        service: database
        team: platform
      annotations:
        summary: "DB 연결 풀 고갈 임박"
        description: "데이터베이스 연결 풀 사용량이 90%를 초과했습니다. 현재: {{ $value | humanizePercentage }}"
    
    # Pod 재시작 알림
    - alert: PodRestartingTooOften
      expr: |
        rate(kube_pod_container_status_restarts_total{namespace="default",pod=~"api-dpl-.*"}[1h]) > 0.5
      for: 5m
      labels:
        severity: warning
        service: kia-api
        team: platform
      annotations:
        summary: "Pod 빈번한 재시작"
        description: "{{ $labels.pod }} Pod이 시간당 0.5회 이상 재시작되고 있습니다."
EOF

kubectl apply -f alerts/alert-rules.yaml
```

---

## 10. 설치 검증

### Step 10.1: 전체 시스템 검증 스크립트
```bash
cat > verify-installation.sh <<'EOF'
#!/bin/bash

echo "======================================"
echo "KIA 모니터링 시스템 설치 검증"
echo "Kubernetes 버전: 1.20.8"
echo "======================================"

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# 함수: 상태 체크
check_status() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓${NC} $1"
    else
        echo -e "${RED}✗${NC} $1"
        return 1
    fi
}

# 0. Kubernetes 버전 확인
echo -e "\n${YELLOW}0. Kubernetes 버전 확인${NC}"
SERVER_VERSION=$(kubectl version --short 2>/dev/null | grep "Server Version" | awk '{print $3}')
echo "Server Version: $SERVER_VERSION"
if [[ "$SERVER_VERSION" == *"1.20"* ]]; then
    echo -e "${GREEN}✓${NC} Kubernetes 1.20.x 확인됨"
else
    echo -e "${YELLOW}!${NC} Kubernetes 버전이 1.20.x가 아닙니다. 호환성 문제가 있을 수 있습니다."
fi

# 1. Namespace 확인
echo -e "\n${YELLOW}1. Namespace 확인${NC}"
kubectl get namespace monitoring > /dev/null 2>&1
check_status "monitoring namespace 존재"

# 2. Prometheus 확인
echo -e "\n${YELLOW}2. Prometheus 상태${NC}"
kubectl get pod -n monitoring -l app.kubernetes.io/name=prometheus -o wide
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n monitoring --timeout=60s > /dev/null 2>&1
check_status "Prometheus Pod 실행중"

# 3. Grafana 확인
echo -e "\n${YELLOW}3. Grafana 상태${NC}"
kubectl get pod -n monitoring -l app.kubernetes.io/name=grafana -o wide
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=60s > /dev/null 2>&1
check_status "Grafana Pod 실행중"

# 4. PushGateway 확인
echo -e "\n${YELLOW}4. PushGateway 상태${NC}"
kubectl get pod -n monitoring -l app=prometheus-pushgateway -o wide
kubectl wait --for=condition=ready pod -l app=prometheus-pushgateway -n monitoring --timeout=60s > /dev/null 2>&1
check_status "PushGateway Pod 실행중"

# 5. ServiceMonitor 확인
echo -e "\n${YELLOW}5. ServiceMonitor 설정${NC}"
kubectl get servicemonitor -n monitoring
check_status "ServiceMonitor 생성됨"

# 6. PrometheusRule 확인
echo -e "\n${YELLOW}6. Alert Rules 설정${NC}"
kubectl get prometheusrule -n monitoring
check_status "PrometheusRule 생성됨"

# 7. API Deployment 확인
echo -e "\n${YELLOW}7. Spring Boot API 상태${NC}"
kubectl get deployment api-dpl -n default > /dev/null 2>&1
if [ $? -eq 0 ]; then
    kubectl get pod -n default -l app=api-dpl
    check_status "API Deployment 실행중"
else
    echo -e "${YELLOW}! API Deployment가 아직 배포되지 않았습니다${NC}"
fi

# 8. CronJob 확인 (K8s 1.20에서는 batch/v1beta1)
echo -e "\n${YELLOW}8. CronJob 상태 (batch/v1beta1)${NC}"
kubectl get cronjob -n default > /dev/null 2>&1
if [ $? -eq 0 ]; then
    kubectl get cronjob -n default
    check_status "CronJob 확인됨"
else
    echo -e "${YELLOW}! CronJob이 아직 생성되지 않았습니다${NC}"
fi

# 9. 서비스 접속 정보
echo -e "\n${YELLOW}9. 서비스 접속 정보${NC}"
echo "======================================"
GRAFANA_SVC=$(kubectl get svc -n monitoring prometheus-stack-grafana -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
if [ -z "$GRAFANA_SVC" ]; then
    echo "Grafana: kubectl port-forward -n monitoring svc/prometheus-stack-grafana 3000:80"
    echo "         http://localhost:3000"
else
    echo "Grafana: http://$GRAFANA_SVC"
fi
echo "Username: admin"
echo "Password: KiaMonitoring2024!"
echo ""
echo "Prometheus: kubectl port-forward -n monitoring svc/prometheus-prometheus 9090:9090"
echo "           http://localhost:9090"
echo ""
echo "PushGateway: kubectl port-forward -n monitoring svc/prometheus-pushgateway 9091:9091"
echo "            http://localhost:9091"
echo "======================================"

# 10. Metrics 수집 테스트
echo -e "\n${YELLOW}10. Metrics 수집 테스트${NC}"
kubectl port-forward -n monitoring svc/prometheus-prometheus 9090:9090 > /dev/null 2>&1 &
PF_PID=$!
sleep 3

# Prometheus targets 확인
curl -s http://localhost:9090/api/v1/targets 2>/dev/null | jq '.data.activeTargets | length' > /dev/null 2>&1
if [ $? -eq 0 ]; then
    TARGET_COUNT=$(curl -s http://localhost:9090/api/v1/targets 2>/dev/null | jq '.data.activeTargets | length')
    echo -e "${GREEN}✓${NC} Active targets: $TARGET_COUNT"
else
    echo -e "${YELLOW}! Prometheus API 접속 실패 (port-forward 필요)${NC}"
fi

kill $PF_PID 2>/dev/null

# 11. Helm 설치 상태
echo -e "\n${YELLOW}11. Helm 설치 상태${NC}"
helm list -n monitoring
helm status prometheus-stack -n monitoring 2>/dev/null | grep "STATUS:" | head -1

echo -e "\n${GREEN}설치 검증 완료!${NC}"
echo "======================================"
echo "K8s 1.20.8 호환 모니터링 스택 준비 완료"
echo "======================================"
EOF

chmod +x verify-installation.sh
./verify-installation.sh
```

---

## 11. 트러블슈팅 (K8s 1.20.8 특화)

### K8s 1.20.8 특유 문제 해결

#### API 버전 관련 에러
```bash
# CronJob API 버전 확인
kubectl api-resources | grep -i cronjob
# batch/v1beta1   true         CronJob

# 만약 batch/v1 사용 시 에러가 나면 batch/v1beta1로 변경
sed -i 's/apiVersion: batch\/v1/apiVersion: batch\/v1beta1/g' *.yaml
```

#### Webhook 에러 (K8s 1.20)
```bash
# ValidatingWebhookConfiguration 에러 시
kubectl delete validatingwebhookconfiguration prometheus-stack-kube-prom-admission 2>/dev/null
kubectl delete mutatingwebhookconfiguration prometheus-stack-kube-prom-admission 2>/dev/null
```

#### RBAC 권한 에러
```bash
# ServiceAccount 권한 추가
cat <<EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: prometheus-prometheus
  namespace: monitoring
EOF
```

#### Pod이 Pending 상태일 때
```bash
# PVC 상태 확인
kubectl get pvc -n monitoring

# StorageClass 확인 및 수정
kubectl get storageclass
# 기본 StorageClass가 없으면 생성
kubectl patch storageclass <your-storage-class> -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

# 이벤트 확인
kubectl describe pod <pod-name> -n monitoring
```

#### 메트릭이 수집되지 않을 때
```bash
# Prometheus targets 확인
kubectl port-forward -n monitoring svc/prometheus-prometheus 9090:9090
# 브라우저에서 http://localhost:9090/targets 확인

# ServiceMonitor 레이블 확인
kubectl get servicemonitor -n monitoring -o yaml | grep -A5 "selector:"

# Pod 어노테이션 확인
kubectl get pod api-dpl-xxx -n default -o yaml | grep -A5 "annotations:"

# Prometheus 설정 리로드
kubectl rollout restart statefulset/prometheus-prometheus -n monitoring
```

#### Grafana 대시보드가 비어있을 때
```bash
# 데이터소스 확인
kubectl exec -n monitoring deployment/prometheus-stack-grafana -- \
  curl -s http://admin:KiaMonitoring2024!@localhost:3000/api/datasources

# Prometheus 쿼리 테스트
kubectl port-forward -n monitoring svc/prometheus-prometheus 9090:9090
# http://localhost:9090/graph 에서 쿼리 테스트
# 예: up{job="spring-boot-pods"}
```

#### 로그 확인
```bash
# Prometheus 로그
kubectl logs -n monitoring -l app.kubernetes.io/name=prometheus --tail=100

# Grafana 로그
kubectl logs -n monitoring -l app.kubernetes.io/name=grafana --tail=100

# Prometheus Operator 로그
kubectl logs -n monitoring -l app.kubernetes.io/component=controller --tail=100

# Spring Boot 앱 로그
kubectl logs -n default -l app=api-dpl --tail=100
```

### Helm 관련 문제 해결

#### Helm 업그레이드 (설정 변경 시)
```bash
# values 파일 수정 후 업그레이드
helm upgrade prometheus-stack \
  prometheus-community/kube-prometheus-stack \
  --version 45.31.1 \
  -n monitoring \
  -f config/02-prometheus-values-k8s-1.20.yaml

# 롤백이 필요한 경우
helm rollback prometheus-stack -n monitoring
```

#### 완전 재설치
```bash
# 1. 기존 설치 삭제
helm uninstall prometheus-stack -n monitoring

# 2. CRD 삭제 (필요시)
kubectl delete crd prometheuses.monitoring.coreos.com
kubectl delete crd prometheusrules.monitoring.coreos.com
kubectl delete crd servicemonitors.monitoring.coreos.com
kubectl delete crd podmonitors.monitoring.coreos.com
kubectl delete crd alertmanagers.monitoring.coreos.com
kubectl delete crd thanosrulers.monitoring.coreos.com

# 3. 재설치
helm install prometheus-stack \
  prometheus-community/kube-prometheus-stack \
  --version 45.31.1 \
  -n monitoring \
  -f config/02-prometheus-values-k8s-1.20.yaml
```

---

## 🎯 K8s 1.20.8 설치 완료 체크리스트

- [ ] Kubernetes 1.20.8 버전 확인
- [ ] Monitoring namespace 생성됨
- [ ] Prometheus Stack v45.31.1 설치 완료
- [ ] 모든 Pod이 Running 상태
- [ ] Grafana 접속 가능
- [ ] ServiceMonitor 생성됨
- [ ] Alert Rules 설정됨
- [ ] PushGateway 실행중
- [ ] Spring Boot 메트릭 수집 확인
- [ ] Istio 메트릭 수집 확인
- [ ] CronJob (batch/v1beta1) 동작 확인
- [ ] 대시보드 Import 완료

---

## 📚 K8s 1.20.8 관련 참고 자료

- [Kubernetes 1.20 Release Notes](https://kubernetes.io/blog/2020/12/08/kubernetes-1-20-release-announcement/)
- [Prometheus Operator Compatibility](https://github.com/prometheus-operator/prometheus-operator#compatibility)
- [kube-prometheus-stack Version Matrix](https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#upgrading-chart)

---

## 💡 K8s 1.20.8 환경 최적화 팁

1. **API 버전 주의사항**
   - CronJob: `batch/v1beta1` 사용
   - Ingress: `networking.k8s.io/v1beta1` 사용
   - ValidatingWebhookConfiguration: 비활성화 권장

2. **리소스 제한**
   - Prometheus: 메모리 2Gi 이하 권장
   - Grafana: 메모리 1Gi로 충분

3. **보안 설정**
   - PodSecurityPolicy 대신 RBAC 활용
   - NetworkPolicy 설정 권장

4. **성능 최적화**
   - scrapeInterval: 30s (기본값 유지)
   - retention: 30d (디스크 공간 고려)

---

## 빠른 설치 명령어 모음

```bash
# 전체 설치 스크립트
cat > quick-install.sh <<'EOF'
#!/bin/bash
echo "KIA.com K8s 1.20.8 모니터링 스택 설치 시작..."

# 1. 디렉토리 생성
mkdir -p kia-monitoring/{config,dashboards,alerts}
cd kia-monitoring

# 2. 네임스페이스 생성
kubectl create namespace monitoring

# 3. Helm repo 추가
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update

# 4. Prometheus Stack 설치 (K8s 1.20.8 호환)
helm install prometheus-stack \
  prometheus-community/kube-prometheus-stack \
  --version 45.31.1 \
  --namespace monitoring \
  --set prometheusOperator.admissionWebhooks.enabled=false \
  --set kubeControllerManager.enabled=false \
  --set kubeScheduler.enabled=false \
  --set kubeProxy.enabled=false \
  --set grafana.adminPassword="KiaMonitoring2024!"

# 5. 설치 확인
echo "설치 완료. Pod 상태 확인중..."
kubectl get pods -n monitoring

echo "Grafana 접속: kubectl port-forward -n monitoring svc/prometheus-stack-grafana 3000:80"
echo "Username: admin / Password: KiaMonitoring2024!"
EOF

chmod +x quick-install.sh
./quick-install.sh
```

---

**작성일**: 2024년
**Kubernetes 버전**: 1.20.8
**버전**: 2.0 (K8s 1.20.8 호환)
**작성자**: KIA DevOps Team
